// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SamanCRM.Infrastructure.EF;

namespace SamanCRM.Infrastructure.EF.Migrations
{
    [DbContext(typeof(DemoContext))]
    [Migration("20230227045203_inittt")]
    partial class inittt
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tb-RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tb-UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Tb-UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Tb-UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Tb-UserTokens");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AccountGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("AccountType")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnotherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attractiveness")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Blog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("Campaign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactFields")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EcoCode")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Emails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpireTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("GeographyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Member")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NationalNum")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("OtherCountry")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OtherGeographicalArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherPostalCode")
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("Otheraddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Othercity")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Otherlatitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Otherlongitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Otherstate")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ownership")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("RefferedBy")
                        .HasColumnType("nvarchar(40)");

                    b.Property<double>("SaleDiscount")
                        .HasColumnType("float(53)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SubIndustry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubNumber")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ValidityLimit")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ValiditySource")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ValiditySourceDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValidityStatus")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ValidityType")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountID");

                    b.HasIndex("AccountID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-Account");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.AccountCampaign", b =>
                {
                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("CampaignID")
                        .HasColumnType("int");

                    b.HasKey("AccountID", "CampaignID");

                    b.HasIndex("CampaignID");

                    b.ToTable("Tb-AccountCampaign");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Activities", b =>
                {
                    b.Property<int>("ActivityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ActivityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActivityType")
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityType")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PersonnelID")
                        .HasColumnType("int");

                    b.HasKey("ActivityID");

                    b.HasIndex("PersonnelID");

                    b.ToTable("Tb-Activities");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.ActivitiesDetail", b =>
                {
                    b.Property<int>("DetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ActivityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActivityID")
                        .HasColumnType("int");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Customer")
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Deadline")
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(155)");

                    b.Property<string>("GroupAnnounce")
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("GuestFullName")
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("GuestsSMS")
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("InternalNum")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("MeetingPlace")
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Meetinglocation")
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("RelatedTo")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("RelatedToInput")
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("SendInvitation")
                        .HasColumnType("bit");

                    b.Property<string>("SoftwareReminder")
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("StartTime")
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("UserSMS")
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("DetailID");

                    b.HasIndex("ActivityID")
                        .IsUnique();

                    b.HasIndex("DetailID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-ActivitiesDetail");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Analysis", b =>
                {
                    b.Property<int>("AnalysisID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnalysisArea")
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("AnalysisGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("AnalysisID");

                    b.HasIndex("AnalysisID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-Analysis");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ParentID")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("RoleID");

                    b.HasIndex("RoleID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-Roles");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.ApplicationSettings", b =>
                {
                    b.Property<int>("SettingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PersonnelID")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VariableName")
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("SettingID");

                    b.HasIndex("PersonnelID");

                    b.ToTable("Tb-ApplicationSettings");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .HasColumnName("UserGuid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("isDisabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("DisabledEndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PassActiveDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("PassExpiryTime")
                        .HasColumnType("datetime");

                    b.Property<int>("PassIncorrectNum")
                        .HasColumnType("int");

                    b.Property<DateTime>("PassiveExpiryTime")
                        .HasColumnType("datetime");

                    b.Property<int>("PassivePermitDays")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonnelID")
                        .HasColumnType("int");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIP")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("PersonnelID")
                        .IsUnique();

                    b.ToTable("Tb-User");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Archive", b =>
                {
                    b.Property<int>("ArchiveID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ArchiveGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityType")
                        .HasColumnType("nvarchar(40)");

                    b.Property<byte[]>("File")
                        .HasColumnType("image");

                    b.Property<string>("FileFormat")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RecordID")
                        .HasColumnType("int");

                    b.HasKey("ArchiveID");

                    b.ToTable("Tb-Archive");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Branch", b =>
                {
                    b.Property<int>("BranchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BranchAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BranchGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BranchPhoneNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("BranchID");

                    b.ToTable("Tb-Branch");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.BranchUser", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "BranchID");

                    b.HasIndex("BranchID");

                    b.ToTable("Tb-BranchUser");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.BuyOrder", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BillAddress")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BillCity")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("BillCountry")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("BillLat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillPostalCode")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("BillSendGeoLoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillState")
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Customer")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("CustomerReminder")
                        .HasColumnType("nvarchar(60)");

                    b.Property<double>("Discount")
                        .HasColumnType("float(53)");

                    b.Property<byte[]>("Files")
                        .HasColumnType("image");

                    b.Property<string>("ForOpportunity")
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("MaturityDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MoneyUnit")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("OrderGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("OtherExpenses")
                        .HasColumnType("float(53)");

                    b.Property<string>("PaymentDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("PhasedDelivery")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ProdAddress")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProdCity")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ProdCountry")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ProdLat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdPostalCode")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ProdSendGeoLoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdState")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ProductList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductSendMethod")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ProductSendType")
                        .HasColumnType("nvarchar(40)");

                    b.Property<double>("ProductSubTotal")
                        .HasColumnType("float(53)");

                    b.Property<double>("ServiceSubTotal")
                        .HasColumnType("float(53)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(40)");

                    b.Property<double>("Subset")
                        .HasColumnType("float(53)");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("SupplierReqNum")
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("Tax")
                        .HasColumnType("float(53)");

                    b.Property<string>("TaxRate")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Terms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float(53)");

                    b.Property<double>("TotalCount")
                        .HasColumnType("float(53)");

                    b.Property<double>("Totalprice")
                        .HasColumnType("float(53)");

                    b.Property<string>("TrackingNum")
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("Transport")
                        .HasColumnType("float(53)");

                    b.Property<double>("TransportTax")
                        .HasColumnType("float(53)");

                    b.HasKey("OrderID");

                    b.HasIndex("OrderID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-BuyOrder");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Campaign", b =>
                {
                    b.Property<int>("CampaignID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<double>("Budget")
                        .HasColumnType("float(53)");

                    b.Property<Guid>("CampaignGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CampaignName")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("CluesClueID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ExpectedAnswer")
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("ExpectedCost")
                        .HasColumnType("float(53)");

                    b.Property<double>("ExpectedIncome")
                        .HasColumnType("float(53)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MoneyUnit")
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("ParentID")
                        .HasColumnType("int");

                    b.Property<string>("ReadEmails")
                        .HasColumnType("nvarchar(60)");

                    b.Property<double>("RealCost")
                        .HasColumnType("float(53)");

                    b.Property<string>("RepetitionRate")
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Target")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("CampaignID");

                    b.HasIndex("CluesClueID");

                    b.HasIndex("CampaignID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-Campaign");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Clues", b =>
                {
                    b.Property<int>("ClueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attractiveness")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Blog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClueCampaign")
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid>("ClueGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClueSource")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ContactFields")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EcoCode")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Emails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("GeographyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("OtherAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherCity")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OtherCountry")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OtherGeographyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherLat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherPostalCode")
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("OtherState")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("RefferedBy")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Segment")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SubIndustry")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SubNumber")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClueID");

                    b.HasIndex("ClueID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-Clues");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.ComPublic", b =>
                {
                    b.Property<int>("ComPublicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<int>("ComPublicTitleID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ParentID")
                        .HasColumnType("int");

                    b.Property<int>("ProgramPartID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ComPublicID");

                    b.HasIndex("ComPublicTitleID");

                    b.HasIndex("ProgramPartID");

                    b.HasIndex("ComPublicID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-ComPublic");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.ComPublicTitles", b =>
                {
                    b.Property<int>("TitleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProgramPartID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TitleID");

                    b.HasIndex("ProgramPartID");

                    b.HasIndex("TitleID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-ComPublicTitles");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Company", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountOwner")
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccNum")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BankCardNum")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(35)");

                    b.Property<Guid>("CompanyGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("CompanyTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EcoCode")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NationalNum")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("OfficePhone")
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ShebaNum")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("SubNumber")
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CompanyID");

                    b.HasIndex("CompanyID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-Company");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Competitor", b =>
                {
                    b.Property<int>("CompetitorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivityExp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityField")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("CeoName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompLat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompetitorGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactFields")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductFields")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Strengths")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeakPoints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompetitorID");

                    b.HasIndex("CompetitorID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-Competitor");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Confirmation", b =>
                {
                    b.Property<int>("ConfirmationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApprovalModel")
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("ApprovalType")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("ConfirmLevel")
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ConfirmationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ParentName")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Seconder")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ConfirmationID");

                    b.HasIndex("ConfirmationID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-Confirmation");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Connections", b =>
                {
                    b.Property<int>("ConnectionsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ActiveConnection")
                        .HasColumnType("bit");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ConditionAmount")
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid>("ConnectionsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailTitle")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Frame")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("MaduleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("MessageTitle")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecordType")
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("SendEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("SendMessage")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("ConnectionsID");

                    b.HasIndex("ConnectionsID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-Connections");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Entities", b =>
                {
                    b.Property<int>("EntitiesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SystemName")
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("EntitiesID");

                    b.HasIndex("EntitiesID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-Entities");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerSMS")
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount")
                        .HasColumnType("float(53)");

                    b.Property<string>("GeographyLoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("GoodJobDeposit")
                        .HasColumnType("float(53)");

                    b.Property<string>("GoodJobDepositPercentage")
                        .HasColumnType("nvarchar(35)");

                    b.Property<double>("InsuranceAmount")
                        .HasColumnType("float(53)");

                    b.Property<string>("InsuranceAmountPercentage")
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("InternalVerify")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("InternalVerifyProblems")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("InvoiceGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InvoiceNum")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MoneyUnit")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherAdditions")
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("OtherAddress")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OtherCity")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("OtherCountry")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("OtherGeographyLoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherLat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherPostalCode")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("OtherState")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PaymentConditions")
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("PersonsID")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PreInvoiceID")
                        .HasColumnType("int");

                    b.Property<string>("PreInvoiceNum")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PreInvoicePrintFrame")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("PreInvoiceSenderCompany")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ProductSendMethod")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProductSendType")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Project")
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("ProjectID")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceCode")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("RelatedTo")
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("RelatedToInput")
                        .HasColumnType("nvarchar(35)");

                    b.Property<double>("Shipment")
                        .HasColumnType("float(53)");

                    b.Property<double>("ShipmentTax")
                        .HasColumnType("float(53)");

                    b.Property<string>("ShipmentTaxPercentage")
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(40)");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float(53)");

                    b.Property<double>("Tax")
                        .HasColumnType("float(53)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(40)");

                    b.Property<double>("Total")
                        .HasColumnType("float(53)");

                    b.Property<double>("TotalCount")
                        .HasColumnType("float(53)");

                    b.Property<double>("TotalReceivable")
                        .HasColumnType("float(53)");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ValidityLimit")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("InvoiceID");

                    b.HasIndex("AccountID");

                    b.HasIndex("PersonsID")
                        .IsUnique();

                    b.HasIndex("PreInvoiceID")
                        .IsUnique();

                    b.HasIndex("ProjectID");

                    b.HasIndex("InvoiceID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-Invoice");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.InvoiceProducts", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceID")
                        .HasColumnType("int");

                    b.HasKey("ProductID", "InvoiceID");

                    b.HasIndex("InvoiceID");

                    b.ToTable("Tb-InvoiceProducts");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.MeetingPlaces", b =>
                {
                    b.Property<int>("PlaceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<bool>("CoolingAndHeating")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Internet")
                        .HasColumnType("bit");

                    b.Property<bool>("LapTop")
                        .HasColumnType("bit");

                    b.Property<bool>("MicroPhone")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Monitor")
                        .HasColumnType("bit");

                    b.Property<bool>("Network")
                        .HasColumnType("bit");

                    b.Property<Guid>("PlaceGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Projector")
                        .HasColumnType("bit");

                    b.Property<int>("RoomCapacity")
                        .HasColumnType("int");

                    b.Property<bool>("WhiteBoard")
                        .HasColumnType("bit");

                    b.HasKey("PlaceID");

                    b.HasIndex("PlaceID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-MeetingPlaces");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Opportunities", b =>
                {
                    b.Property<int>("OpportunityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ApplicationUserUserID")
                        .HasColumnType("int");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("Campaign")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ClueID")
                        .HasColumnType("int");

                    b.Property<string>("ClueSource")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ExpectedPrice")
                        .HasColumnType("float(53)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MoneyUnit")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NextStep")
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("OpportunityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OpportunityName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PayTermEndDate")
                        .HasColumnType("datetime");

                    b.Property<double>("Price")
                        .HasColumnType("float(53)");

                    b.Property<string>("PriceBased")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("ProductList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Project")
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("ReasonofLoss")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SaleForecast")
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("SaleProcess")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SendingInvoiceTerms")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SuccessProssibility")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("OpportunityID");

                    b.HasIndex("AccountID");

                    b.HasIndex("ApplicationUserUserID");

                    b.HasIndex("ClueID")
                        .IsUnique();

                    b.HasIndex("OpportunityID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-Opportunities");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.OpportunitiesCampaign", b =>
                {
                    b.Property<int>("OpportunitiesID")
                        .HasColumnType("int");

                    b.Property<int>("CampaignID")
                        .HasColumnType("int");

                    b.HasKey("OpportunitiesID", "CampaignID");

                    b.HasIndex("CampaignID");

                    b.ToTable("Tb-OpportunitiesCampaign");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.OpportunitiesProducts", b =>
                {
                    b.Property<int>("OpportunitiesID")
                        .HasColumnType("int");

                    b.Property<int>("ProductsID")
                        .HasColumnType("int");

                    b.HasKey("OpportunitiesID", "ProductsID");

                    b.HasIndex("ProductsID");

                    b.ToTable("Tb-OpportunitiesProducts");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.PasswordComplexity", b =>
                {
                    b.Property<int>("PasswordComplexityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PassLeastChar")
                        .HasColumnType("int");

                    b.Property<int>("PassMaxChar")
                        .HasColumnType("int");

                    b.Property<Guid>("PasswordComplexityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SpecialChar")
                        .HasColumnType("nchar(5)");

                    b.Property<string>("UseChar")
                        .IsRequired()
                        .HasColumnType("nchar(5)");

                    b.Property<string>("UseDigit")
                        .IsRequired()
                        .HasColumnType("nchar(5)");

                    b.Property<string>("UseSpecialChar")
                        .IsRequired()
                        .HasColumnType("nchar(5)");

                    b.HasKey("PasswordComplexityID");

                    b.ToTable("Tb-PasswordComplexity");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float(53)");

                    b.Property<string>("Assignedcount")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Associated")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Branch")
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Customer")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("CustomerSMS")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direction")
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("DoneDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Factor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ForecastedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Fund")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MoneyUnit")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ParentName")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PaymentCompany")
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid>("PaymentGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReferenceNum")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Remaincount")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("PaymentID");

                    b.HasIndex("PaymentID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-Payment");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Personnel", b =>
                {
                    b.Property<int>("PersonnelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("GeographyLoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalNum")
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerName")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentID")
                        .HasColumnType("int");

                    b.Property<Guid>("PersonnelGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("WorkingUnit")
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("contactFields")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("orgPost")
                        .HasColumnType("int");

                    b.Property<string>("workingSection")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonnelID");

                    b.HasIndex("PersonnelID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-Personnel");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.PersonnelRole", b =>
                {
                    b.Property<int>("PersonnelID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("PersonnelID", "RoleID");

                    b.HasIndex("RoleID");

                    b.ToTable("Tb-PersonnelRole");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Persons", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Blog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ClueSource")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactFields")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FaceBook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeographyLoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerName")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherCity")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("OtherCountry")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("OtherGeographyLoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherLatitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherLongitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherPostalCode")
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("OtherState")
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid>("PersonGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("SecretaryName")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Section")
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Segment")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PersonID");

                    b.HasIndex("AccountID");

                    b.HasIndex("PersonID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-Persons");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.PersonsCampaign", b =>
                {
                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<int>("CampaignID")
                        .HasColumnType("int");

                    b.HasKey("PersonID", "CampaignID");

                    b.HasIndex("CampaignID");

                    b.ToTable("Tb-PersonsCampaign");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.PreInvoice", b =>
                {
                    b.Property<int>("PreInvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Customer")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("CustomerSMS")
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount")
                        .HasColumnType("float(53)");

                    b.Property<string>("GeographyLoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("GoodJobDeposit")
                        .HasColumnType("float(53)");

                    b.Property<string>("GoodJobDepositPercentage")
                        .HasColumnType("nvarchar(35)");

                    b.Property<double>("InsuranceAmount")
                        .HasColumnType("float(53)");

                    b.Property<string>("InsuranceAmountPercentage")
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("InternalVerify")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("InternalVerifyProblems")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("InvoiceState")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MoneyUnit")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpportunitiesID")
                        .HasColumnType("int");

                    b.Property<string>("OtherAdditions")
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("OtherAddress")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OtherCity")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("OtherCountry")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("OtherGeographyLoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherLat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherPostalCode")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("OtherState")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PaymentConditions")
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("PersonsID")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("PreInvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("PreInvoiceGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PreInvoiceLevel")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PreInvoiceNum")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PreInvoicePrintFrame")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("PreInvoiceSenderCompany")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ProductSendMethod")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProductSendType")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Project")
                        .HasColumnType("nvarchar(35)");

                    b.Property<int?>("ProjectID")
                        .HasColumnType("int");

                    b.Property<string>("RelatedTo")
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("RelatedToInput")
                        .HasColumnType("nvarchar(35)");

                    b.Property<double>("Shipment")
                        .HasColumnType("float(53)");

                    b.Property<double>("ShipmentTax")
                        .HasColumnType("float(53)");

                    b.Property<string>("ShipmentTaxPercentage")
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float(53)");

                    b.Property<double>("Tax")
                        .HasColumnType("float(53)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(40)");

                    b.Property<double>("Total")
                        .HasColumnType("float(53)");

                    b.Property<double>("TotalCount")
                        .HasColumnType("float(53)");

                    b.Property<double>("TotalNum")
                        .HasColumnType("float(53)");

                    b.Property<double>("TotalReceivable")
                        .HasColumnType("float(53)");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("ValidityDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ValidityLimit")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PreInvoiceID");

                    b.HasIndex("AccountID");

                    b.HasIndex("OpportunitiesID");

                    b.HasIndex("PersonsID")
                        .IsUnique();

                    b.HasIndex("ProjectID");

                    b.HasIndex("PreInvoiceID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-PreInvoice");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.PreInvoiceProducts", b =>
                {
                    b.Property<int>("PreInvoiceID")
                        .HasColumnType("int");

                    b.Property<int>("ProductsID")
                        .HasColumnType("int");

                    b.HasKey("PreInvoiceID", "ProductsID");

                    b.HasIndex("ProductsID");

                    b.ToTable("Tb-PreInvoiceProducts");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<Guid>("CategoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ParentCategory")
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("ParentID")
                        .HasColumnType("int");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.HasIndex("CategoryID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-ProductCategory");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Products", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvailableForSale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BatchNum")
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("GrossWeight")
                        .HasColumnType("float(53)");

                    b.Property<double>("Height")
                        .HasColumnType("float(53)");

                    b.Property<int>("HoursCount")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceType")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("LatNum")
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("Length")
                        .HasColumnType("float(53)");

                    b.Property<string>("MainMeasurement")
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MoneyUnit")
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("NeedProductReturn")
                        .HasColumnType("bit");

                    b.Property<double>("NetWeight")
                        .HasColumnType("float(53)");

                    b.Property<string>("NumPerUnit")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("OrderRate")
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PocketNum")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(80)");

                    b.Property<Guid>("ProductGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PurchasePrice")
                        .HasColumnType("float(53)");

                    b.Property<string>("Pursuer")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SafetyStock")
                        .HasColumnType("nvarchar(15)");

                    b.Property<double>("SalePrice")
                        .HasColumnType("float(53)");

                    b.Property<bool>("Saleable")
                        .HasColumnType("bit");

                    b.Property<string>("SecondMeasurement")
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("SerialNum")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("StoreInventory")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("ValidityDate")
                        .HasColumnType("datetime");

                    b.Property<double>("Width")
                        .HasColumnType("float(53)");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ProductID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-Products");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.ProgramPart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BreadCrumbs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ParentID")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("RouteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemName")
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Tb-ProgramPart");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<string>("AccountantNum")
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("ClueID")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Importance")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Log")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainAddress")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MainSendGeoLoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("ProjectGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProjectType")
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("ProjectID");

                    b.HasIndex("AccountID");

                    b.HasIndex("ClueID");

                    b.HasIndex("ProjectID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-Project");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Report", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditTable")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Display")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("InternalDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PublicDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportFormat")
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("ReportGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReportModule")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReportName")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ReportRange")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("ReportID");

                    b.HasIndex("ReportID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-Report");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.RoleProgramPart", b =>
                {
                    b.Property<int>("ProgramPartID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("ProgramPartID", "RoleID");

                    b.HasIndex("RoleID");

                    b.ToTable("Tb-RoleProgramPart");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.SaleContract", b =>
                {
                    b.Property<int>("ContractID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CompanySignDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ContractGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContractManager")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ContractTitle")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContractType")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Customer")
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("CustomerSignDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount")
                        .HasColumnType("float(53)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<double>("ForecastSale")
                        .HasColumnType("float");

                    b.Property<double>("GoodJobDeposit")
                        .HasColumnType("float(53)");

                    b.Property<double>("GuaranteeObligations")
                        .HasColumnType("float");

                    b.Property<double>("InsuranceDepositAmount")
                        .HasColumnType("float");

                    b.Property<string>("InvoiceSendPeriod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceSendType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceSenderCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoicedTill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MoneyUnit")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("OtherAdditions")
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("ReferenceCode")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("RelatedTo")
                        .HasColumnType("nvarchar(35)");

                    b.Property<DateTime>("RememberExtentionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SaleOpportunity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shipment")
                        .HasColumnType("nvarchar(35)");

                    b.Property<double>("ShipmentTax")
                        .HasColumnType("float(53)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(40)");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float(53)");

                    b.Property<string>("SuccessRate")
                        .HasColumnType("nvarchar(40)");

                    b.Property<double>("Tax")
                        .HasColumnType("float(53)");

                    b.Property<double>("Total")
                        .HasColumnType("float(53)");

                    b.Property<double>("TotalCount")
                        .HasColumnType("float(53)");

                    b.HasKey("ContractID");

                    b.HasIndex("ContractID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-SaleContract");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Service", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("کاربر ایجاد کننده");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasComment("تاریخ ایجاد");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Limitation")
                        .HasColumnType("int")
                        .HasComment("حد مجاز");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("کاربر ویرایش کننده");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasComment("تاریخ تغییر");

                    b.Property<string>("MoneyUnit")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("واحد پول");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(60)")
                        .HasComment("نام خدمت");

                    b.Property<double>("Price")
                        .HasColumnType("float(53)")
                        .HasComment("قیمت");

                    b.Property<string>("ServiceUnit")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("واحد ارائه خدمات");

                    b.HasKey("ServiceID");

                    b.ToTable("Tb-Service");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Services", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AnnounceChannel")
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerReason")
                        .HasColumnType("nvarchar(155)");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceLoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceLocInput")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileTitle")
                        .HasColumnType("nvarchar(40)");

                    b.Property<byte[]>("Files")
                        .HasColumnType("image");

                    b.Property<string>("FirstLayerUser")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("GeographyLoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstallLoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Intensity")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PersonsID")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceiveDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SecondLayerUser")
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid>("ServiceGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceNum")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ServiceReason")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ServiceType")
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Solution")
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("ServiceID");

                    b.HasIndex("AccountID");

                    b.HasIndex("PersonsID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ServiceID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-Services");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<string>("Attractiveness")
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("BillAddress")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BillCity")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("BillCountry")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("BillLat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillPostalCode")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("BillSendGeoLoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillState")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Blog")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("ContactFields")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EcoCode")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Emails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaceBook")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("NationalNum")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ProdAddress")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProdCity")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ProdCountry")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ProdLat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdPostalCode")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ProdSendGeoLoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdState")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SubIndustry")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubNum")
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("SupplierGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SupplierNum")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("SupplierID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.HasIndex("SupplierID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-Supplier");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.SupplierProducts", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("ProductID", "SupplierID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Tb-SupplierProducts");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Target", b =>
                {
                    b.Property<int>("TargetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("CallMe")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("GeographyLoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeNum")
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainAddress")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("OfficePhone")
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("OtherPhoneNum")
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("PhoneNum")
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SecretaryName")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid>("TargetGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("TargetID");

                    b.HasIndex("TargetID", "BranchID")
                        .IsUnique();

                    b.ToTable("Tb-Target");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.AccountCampaign", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.Account", "Account")
                        .WithMany("AccountCampaigns")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamanCRM.Core.Domain.Entities.Campaign", "Campaign")
                        .WithMany("AccountCampaigns")
                        .HasForeignKey("CampaignID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Activities", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.Personnel", "Personnel")
                        .WithMany("Activities")
                        .HasForeignKey("PersonnelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.ActivitiesDetail", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.Activities", "Activities")
                        .WithOne("ActivitiesDetail")
                        .HasForeignKey("SamanCRM.Core.Domain.Entities.ActivitiesDetail", "ActivityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.ApplicationSettings", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.Personnel", "Personnel")
                        .WithMany("ApplicationSettings")
                        .HasForeignKey("PersonnelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.Personnel", "Personnel")
                        .WithOne("ApplicationUser")
                        .HasForeignKey("SamanCRM.Core.Domain.Entities.ApplicationUser", "PersonnelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.BranchUser", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.Branch", "Branch")
                        .WithMany("BranchUsers")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamanCRM.Core.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("BranchUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Campaign", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.Clues", null)
                        .WithMany("Campaign")
                        .HasForeignKey("CluesClueID");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.ComPublic", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.ComPublicTitles", "ComPublicTitles")
                        .WithMany("ComPublics")
                        .HasForeignKey("ComPublicTitleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamanCRM.Core.Domain.Entities.ProgramPart", "ProgramPart")
                        .WithMany("ComPublics")
                        .HasForeignKey("ProgramPartID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.ComPublicTitles", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.ProgramPart", "ProgramPart")
                        .WithMany("ComPublicTitles")
                        .HasForeignKey("ProgramPartID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.Account", "Account")
                        .WithMany("Invoices")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamanCRM.Core.Domain.Entities.Persons", "Persons")
                        .WithOne("Invoice")
                        .HasForeignKey("SamanCRM.Core.Domain.Entities.Invoice", "PersonsID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SamanCRM.Core.Domain.Entities.PreInvoice", "PreInvoice")
                        .WithOne("Invoice")
                        .HasForeignKey("SamanCRM.Core.Domain.Entities.Invoice", "PreInvoiceID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SamanCRM.Core.Domain.Entities.Project", null)
                        .WithMany("Invoices")
                        .HasForeignKey("ProjectID");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.InvoiceProducts", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceProducts")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamanCRM.Core.Domain.Entities.Products", "Products")
                        .WithMany("InvoiceProducts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Opportunities", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.Account", "Account")
                        .WithMany("Opportunities")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamanCRM.Core.Domain.Entities.ApplicationUser", null)
                        .WithMany("Opportunities")
                        .HasForeignKey("ApplicationUserUserID");

                    b.HasOne("SamanCRM.Core.Domain.Entities.Clues", "Clues")
                        .WithOne("Opportunities")
                        .HasForeignKey("SamanCRM.Core.Domain.Entities.Opportunities", "ClueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.OpportunitiesCampaign", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.Campaign", "Campaign")
                        .WithMany("OpportunitiesCampaigns")
                        .HasForeignKey("CampaignID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SamanCRM.Core.Domain.Entities.Opportunities", "Opportunities")
                        .WithMany("OpportunitiesCampaigns")
                        .HasForeignKey("OpportunitiesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.OpportunitiesProducts", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.Opportunities", "Opportunities")
                        .WithMany("OpportunitiesProducts")
                        .HasForeignKey("OpportunitiesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamanCRM.Core.Domain.Entities.Products", "Products")
                        .WithMany("OpportunitiesProducts")
                        .HasForeignKey("ProductsID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.PersonnelRole", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.Personnel", "Personnel")
                        .WithMany("PersonnelRole")
                        .HasForeignKey("PersonnelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamanCRM.Core.Domain.Entities.ApplicationRole", "ApplicationRole")
                        .WithMany("PersonnelRole")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Persons", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.Account", "Account")
                        .WithMany("Persons")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.PersonsCampaign", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.Campaign", "Campaign")
                        .WithMany("PersonsCampaign")
                        .HasForeignKey("CampaignID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamanCRM.Core.Domain.Entities.Persons", "Persons")
                        .WithMany("PersonsCampaigns")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.PreInvoice", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.Account", "Account")
                        .WithMany("PreInvoices")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamanCRM.Core.Domain.Entities.Opportunities", "Opportunities")
                        .WithMany("PreInvoices")
                        .HasForeignKey("OpportunitiesID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SamanCRM.Core.Domain.Entities.Persons", "Persons")
                        .WithOne("PreInvoice")
                        .HasForeignKey("SamanCRM.Core.Domain.Entities.PreInvoice", "PersonsID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SamanCRM.Core.Domain.Entities.Project", null)
                        .WithMany("PreInvoices")
                        .HasForeignKey("ProjectID");
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.PreInvoiceProducts", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.PreInvoice", "PreInvoice")
                        .WithMany("PreInvoiceProducts")
                        .HasForeignKey("PreInvoiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamanCRM.Core.Domain.Entities.Products", "Products")
                        .WithMany("PreInvoiceProducts")
                        .HasForeignKey("ProductsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Products", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Project", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.Account", "Account")
                        .WithMany("Projects")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamanCRM.Core.Domain.Entities.Clues", "Clues")
                        .WithMany("Projects")
                        .HasForeignKey("ClueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.RoleProgramPart", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.ProgramPart", "ProgramPart")
                        .WithMany("RoleProgramParts")
                        .HasForeignKey("ProgramPartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamanCRM.Core.Domain.Entities.ApplicationRole", "ApplicationRole")
                        .WithMany("RoleProgramParts")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Services", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.Account", "Account")
                        .WithMany("Services")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamanCRM.Core.Domain.Entities.Persons", "Persons")
                        .WithMany("Services")
                        .HasForeignKey("PersonsID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SamanCRM.Core.Domain.Entities.Products", "Products")
                        .WithMany("Services")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.Supplier", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.Account", "Account")
                        .WithOne("Supplier")
                        .HasForeignKey("SamanCRM.Core.Domain.Entities.Supplier", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamanCRM.Core.Domain.Entities.SupplierProducts", b =>
                {
                    b.HasOne("SamanCRM.Core.Domain.Entities.Products", "Products")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamanCRM.Core.Domain.Entities.Supplier", "Supplier")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
